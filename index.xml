<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>It's Go time!</title><link>https://catpaladin.github.io/</link><description>Recent content on It's Go time!</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 25 Jan 2025 12:05:27 -0800</lastBuildDate><atom:link href="https://catpaladin.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Building a REST API with Go</title><link>https://catpaladin.github.io/posts/go-simple-api/</link><pubDate>Sat, 25 Jan 2025 12:05:27 -0800</pubDate><guid>https://catpaladin.github.io/posts/go-simple-api/</guid><description>&lt;p>Have you ever wondered how modern web applications handle user authentication and data securely? In this guide, we&amp;rsquo;ll explore building a secure REST API from the ground up using Go. Whether you&amp;rsquo;re new to Go or an experienced developer, you&amp;rsquo;ll learn how to create an API that handles user authentication.&lt;/p>
&lt;p>For those who need to see the whole code before diving in, you can find all of this on &lt;a href="https://github.com/catpaladin/go-api-example">Github&lt;/a>&lt;/p>
&lt;h2 id="technology-stack-overview">Technology Stack Overview&lt;/h2>
&lt;p>Our API implementation uses three main technologies:&lt;/p></description></item><item><title>About</title><link>https://catpaladin.github.io/about/</link><pubDate>Fri, 24 Jan 2025 17:49:05 -0800</pubDate><guid>https://catpaladin.github.io/about/</guid><description>&lt;p>Hi, I&amp;rsquo;m Mike!&lt;/p>
&lt;h3 id="-about-me">â˜• About Me&lt;/h3>
&lt;ul>
&lt;li>ðŸ’» Senior Software Engineer with experience in DevOps, Platform/Infrastructure, and ML&lt;/li>
&lt;li>ðŸ”­ Iâ€™m currently working on personal Go projects or learnings, when not doing my day job&lt;/li>
&lt;li>Coffee Connoisseur&lt;/li>
&lt;li>Blogging to help teach others about my interests&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="languages-and-tools">Languages and Tools&lt;/h3>
&lt;p>Just some of my everyday languages + toolset&lt;/p>
&lt;div style="display: flex; gap: 10px; align-items: center;">
 &lt;img src="https://raw.githubusercontent.com/devicons/devicon/master/icons/go/go-original.svg" title="Go" alt="Go" width="40" height="40"/>
 &lt;img src="https://raw.githubusercontent.com/devicons/devicon/master/icons/python/python-original.svg" title="Python" alt="Python" width="40" height="40"/>
 &lt;img src="https://raw.githubusercontent.com/devicons/devicon/master/icons/bash/bash-original.svg" title="Bash" alt="Bash" width="40" height="40"/>
 &lt;img src="https://raw.githubusercontent.com/devicons/devicon/master/icons/neovim/neovim-original.svg" title="Neovim" alt="Neovim" width="40" height="40"/>
 &lt;img src="https://raw.githubusercontent.com/devicons/devicon/master/icons/githubactions/githubactions-original.svg" title="GithubActions" alt="GithubActions" width="40" height="40"/>
 &lt;img src="https://raw.githubusercontent.com/devicons/devicon/master/icons/kubernetes/kubernetes-original.svg" title="Kubernetes" alt="Kubernetes" width="40" height="40"/>
 &lt;img src="https://raw.githubusercontent.com/devicons/devicon/master/icons/helm/helm-original.svg" title="Helm" alt="Helm" width="40" height="40"/>
 &lt;img src="https://raw.githubusercontent.com/devicons/devicon/master/icons/docker/docker-original.svg" title="Docker" alt="Docker" width="40" height="40"/>
 &lt;img src="https://raw.githubusercontent.com/devicons/devicon/master/icons/amazonwebservices/amazonwebservices-original-wordmark.svg" title="AWS" alt="AWS" width="40" height="40"/>
 &lt;img src="https://raw.githubusercontent.com/devicons/devicon/master/icons/jupyter/jupyter-original.svg" title="Jupyter" alt="Jupyter" width="40" height="40"/>
 &lt;img src="https://raw.githubusercontent.com/devicons/devicon/master/icons/terraform/terraform-original.svg" title="Terraform" alt="Terraform" width="40" height="40"/>
&lt;/div></description></item><item><title>Introduction to Go and HTMX</title><link>https://catpaladin.github.io/posts/intro-to-go-htmx/</link><pubDate>Thu, 23 Jan 2025 19:17:55 -0800</pubDate><guid>https://catpaladin.github.io/posts/intro-to-go-htmx/</guid><description>&lt;p>Hello readers. Welcome to my blog!&lt;/p>
&lt;p>I was debating on if I would write out a full post for this initial one (to test, you know?).
Instead, I decided to go through my collection of notes and found a topic to post; Go &amp;amp; &lt;a href="https://htmx.org/docs/#introduction">htmx&lt;/a>.&lt;/p>
&lt;p>However, if you&amp;rsquo;d like to learn more about me, check out my &lt;a href="https://blog.mikesahari.com/about/">about&lt;/a> page.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>When building modern web applications, we often seek solutions that combine the robustness of server-side programming with the interactivity of client-side applications. Today, I&amp;rsquo;m excited to share my experience working with Go and HTMX, a powerful combination that achieves exactly this balance.&lt;/p></description></item></channel></rss>