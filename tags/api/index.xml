<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Api on It's Go time!</title><link>https://catpaladin.github.io/tags/api/</link><description>Recent content in Api on It's Go time!</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 25 Jan 2025 12:05:27 -0800</lastBuildDate><atom:link href="https://catpaladin.github.io/tags/api/index.xml" rel="self" type="application/rss+xml"/><item><title>Building a REST API with Go</title><link>https://catpaladin.github.io/posts/go-simple-api/</link><pubDate>Sat, 25 Jan 2025 12:05:27 -0800</pubDate><guid>https://catpaladin.github.io/posts/go-simple-api/</guid><description>
&lt;p>Have you ever wondered how modern web applications handle user authentication and data securely? In this guide, we&amp;rsquo;ll explore building a secure REST API from the ground up using Go. Whether you&amp;rsquo;re new to Go or an experienced developer, you&amp;rsquo;ll learn how to create an API that handles user authentication.&lt;/p>
&lt;p>For those who need to see the whole code before diving in, you can find all of this on &lt;a href="https://github.com/catpaladin/go-api-example">Github&lt;/a>&lt;/p>
&lt;h2 id="technology-stack-overview">Technology Stack Overview&lt;/h2>
&lt;p>Our API implementation uses three main technologies:&lt;/p></description></item></channel></rss>