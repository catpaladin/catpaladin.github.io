<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Htmx on It's Go time!</title><link>https://catpaladin.github.io/tags/htmx/</link><description>Recent content in Htmx on It's Go time!</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 23 Jan 2025 19:17:55 -0800</lastBuildDate><atom:link href="https://catpaladin.github.io/tags/htmx/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to Go and HTMX</title><link>https://catpaladin.github.io/posts/intro-to-go-htmx/</link><pubDate>Thu, 23 Jan 2025 19:17:55 -0800</pubDate><guid>https://catpaladin.github.io/posts/intro-to-go-htmx/</guid><description>
&lt;p>Hello readers. Welcome to my blog!&lt;/p>
&lt;p>I was debating on if I would write out a full post for this initial one (to test, you know?).
Instead, I decided to go through my collection of notes and found a topic to post; Go &amp;amp; &lt;a href="https://htmx.org/docs/#introduction">htmx&lt;/a>.&lt;/p>
&lt;p>However, if you&amp;rsquo;d like to learn more about me, check out my &lt;a href="https://blog.mikesahari.com/about/">about&lt;/a> page.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>When building modern web applications, we often seek solutions that combine the robustness of server-side programming with the interactivity of client-side applications. Today, I&amp;rsquo;m excited to share my experience working with Go and HTMX, a powerful combination that achieves exactly this balance.&lt;/p></description></item></channel></rss>