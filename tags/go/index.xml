<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Go on It's Go time!</title><link>https://blog.mikesahari.com/tags/go/</link><description>Recent content in Go on It's Go time!</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><image><url>https://blog.mikesahari.com/images/gopher_favicon.svg</url><title>It's Go time!</title><link>https://blog.mikesahari.com/</link></image><lastBuildDate>Sat, 17 May 2025 14:06:14 -0700</lastBuildDate><atom:link href="https://blog.mikesahari.com/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Mastering DSAs in Go - Data Structures [Part 2]</title><link>https://blog.mikesahari.com/posts/dsa-part2-data-structures/</link><pubDate>Sat, 17 May 2025 14:06:14 -0700</pubDate><guid isPermaLink="true">https://blog.mikesahari.com/posts/dsa-part2-data-structures/</guid><media:content url="https://blog.mikesahari.com/images/gophers/go-learn.svg" medium="image" type="image/svg+xml" isDefault="true"/><description><![CDATA[
        <p>Hello, Gophers! Welcome to Part 2 of Data Structures and Algorithms. If you&rsquo;ve missed
Part 1 on Big O, you can read it
<a href="https://blog.mikesahari.com/posts/dsa-part1-big-o/">here</a>.</p>
<p>Data structures form the foundation of computer scienceâ€”they&rsquo;re how we organize, store,
and manipulate information in ways that mirror how we think and solve problems. Far
beyond mere implementation details, these abstractions shape how we conceptualize
computational challenges. Whether you&rsquo;re building a search engine indexing billions of
webpages, an operating system managing memory resources, or a mobile app tracking user
interactions, choosing the right data structure can mean the difference between a
solution that scales gracefully and one that becomes that legacy tech debt app that
engineers share stories about, blaming the original designer (you know who you are).</p>
      ]]></description></item><item><title>Mastering DSAs in Go: The Big-O Guide [Part 1]</title><link>https://blog.mikesahari.com/posts/dsa-part1-big-o/</link><pubDate>Sat, 05 Apr 2025 14:30:41 -0700</pubDate><guid isPermaLink="true">https://blog.mikesahari.com/posts/dsa-part1-big-o/</guid><media:content url="https://blog.mikesahari.com/images/gophers/go-grow.svg" medium="image" type="image/svg+xml" isDefault="true"/><description><![CDATA[
        <p>I&rsquo;ve been really enjoying teaching fundamentals in Go, recently. If you haven&rsquo;t read any
of my other blogs or are new to go, I strongly recommend checking out my
<a href="https://blog.mikesahari.com/tags/fundamentals/">fundamentals</a> posts. I started this
blog as a next step, and before I knew it I was writing something way too long to share.
This will be the first part of a blog series on data structures and algorithms; and of
course, in Go!</p>
      ]]></description></item><item><title>Structs Fundamentals: From Basics to Advanced Usage</title><link>https://blog.mikesahari.com/posts/go-structs/</link><pubDate>Fri, 28 Mar 2025 21:45:06 -0700</pubDate><guid isPermaLink="true">https://blog.mikesahari.com/posts/go-structs/</guid><media:content url="https://blog.mikesahari.com/images/gophers/go-learn.svg" medium="image" type="image/svg+xml" isDefault="true"/><description><![CDATA[
        <p>If you&rsquo;ve been diving into Go programming (or &ldquo;Golang&rdquo; as the cool kids say), you&rsquo;ve definitely encountered structs. They&rsquo;re absolutely fundamental to how we organize and work with data in Go, and mastering them is crucial to writing clean, efficient Go code.</p>
<p>I like to teach about structs, like other fundamentals, because of how powerful structs can be when used properly. Let&rsquo;s break down everything you need to know about structs, from the very basics to some advanced patterns I&rsquo;ve learned the hard way.</p>
      ]]></description></item><item><title>Modern Templating for Go with Templ</title><link>https://blog.mikesahari.com/posts/html-templating/</link><pubDate>Fri, 21 Mar 2025 19:50:55 -0700</pubDate><guid isPermaLink="true">https://blog.mikesahari.com/posts/html-templating/</guid><media:content url="https://blog.mikesahari.com/images/gophers/go-trending.svg" medium="image" type="image/svg+xml" isDefault="true"/><description><![CDATA[
        <p>I&rsquo;ve been working on a handful of personal webdev Go projects, and the one thing I could never wrap my head around was <a href="https://github.com/a-h/templ">Templ</a>. I would start the project and go, &ldquo;Oh no. I need a UI for this. Not everything can be made into a TUI&hellip; or can it..&rdquo;. This would lead me to looking at the Templ docs, not understanding how to implement it, and either use the embed package (I LOVE <a href="https://pkg.go.dev/embed">embed</a>!) or starting a TypeScript frontend, creating a bunch of tsx files and coming to the sudden realization that I gave in to React.</p>
      ]]></description></item><item><title>Understanding Go Interfaces</title><link>https://blog.mikesahari.com/posts/interfaces/</link><pubDate>Fri, 14 Mar 2025 21:49:18 -0700</pubDate><guid isPermaLink="true">https://blog.mikesahari.com/posts/interfaces/</guid><media:content url="https://blog.mikesahari.com/images/gophers/go-learn.svg" medium="image" type="image/svg+xml" isDefault="true"/><description><![CDATA[
        <p>I still remember the moment it clicked. I was knee-deep in refactoring a Go CLI (<em>weekend project</em>) for unit testing with mocks, which had become a tangled mess of dependencies when suddenly â€“ ðŸ¤¯ â€“ the elegance of Go&rsquo;s interface system hit me like a revelation.</p>
<p>It has been many years, but I remember programming in C#; where interfaces were verbose constructs that required explicit declarations and implementation hierarchies. But here was Go, silently composing functionality in a way that felt almost magical.</p>
      ]]></description></item><item><title>Building a Rate-Limiter in Go</title><link>https://blog.mikesahari.com/posts/rate-limiting/</link><pubDate>Fri, 07 Mar 2025 18:52:37 -0800</pubDate><guid isPermaLink="true">https://blog.mikesahari.com/posts/rate-limiting/</guid><media:content url="https://blog.mikesahari.com/images/gophers/go-magic.svg" medium="image" type="image/svg+xml" isDefault="true"/><description><![CDATA[
        <p>Here is a fun project to get you GO-ing! Imagine, your API is humming along nicely until that one client (a complete savage) decides to hammer it with requests, bringing everything to a crawl. This is where rate limiting comes in to save the day!</p>
<p>In this post, we&rsquo;re building a configurable rate-limiting reverse proxy. And by the end of this blog, you&rsquo;ll have a lightweight, performant service that sits in front of your APIs and protects them from traffic spikes.</p>
      ]]></description></item><item><title>A Guide to Pointers in Go</title><link>https://blog.mikesahari.com/posts/go-pointers/</link><pubDate>Fri, 28 Feb 2025 22:14:22 -0800</pubDate><guid isPermaLink="true">https://blog.mikesahari.com/posts/go-pointers/</guid><media:content url="https://blog.mikesahari.com/images/gophers/go-learn.svg" medium="image" type="image/svg+xml" isDefault="true"/><description><![CDATA[
        <p>Let&rsquo;s get real about pointers in Goâ€”they&rsquo;re not the scary beasts you might remember from C (if you came from that CS background). Go&rsquo;s pointer implementation strikes that perfect balance between giving you low-level control and keeping you from shooting yourself in the foot.</p>
<h2 id="for-python-developers-why-care-about-pointers">For Python Developers: Why Care About Pointers?</h2>
<p>This blog introduces pointers, a fundamental programming concept many developers struggle with. Having worked with numerous senior Cloud Engineers, SREs, and Platform Engineers who, despite years of industry experience, have only Python knowledge and limited exposure to memory management concepts, I&rsquo;ve crafted this primer to establish essential context before diving into the main teachings.</p>
      ]]></description></item><item><title>Go Channels: A Concurrency Guide</title><link>https://blog.mikesahari.com/posts/go-channels/</link><pubDate>Fri, 21 Feb 2025 21:43:05 -0800</pubDate><guid isPermaLink="true">https://blog.mikesahari.com/posts/go-channels/</guid><media:content url="https://blog.mikesahari.com/images/gophers/go-learn.svg" medium="image" type="image/svg+xml" isDefault="true"/><description><![CDATA[
        <p>Hello fellow Gophers!</p>
<p>I&rsquo;m absolutely thrilled to dive deep into one of Go&rsquo;s most elegant features: <strong>Channels</strong>! If you&rsquo;re just starting your Go journey or looking to level up your concurrency game, you&rsquo;re in for a treat.</p>
<p>Channels are the communication mechanism that makes goroutines work together efficiently and safely. They enable goroutines to exchange data without shared memory, reducing the risk of race conditions.</p>
<p>I hate to use an analogy here, but imagine you have a team of engineers working on some big company project.. let&rsquo;s call it Kilonova.</p>
      ]]></description></item><item><title>Understanding Generic Type Aliases in Go 1.24</title><link>https://blog.mikesahari.com/posts/type-aliases/</link><pubDate>Sat, 15 Feb 2025 09:00:54 -0800</pubDate><guid isPermaLink="true">https://blog.mikesahari.com/posts/type-aliases/</guid><media:content url="https://blog.mikesahari.com/images/gophers/go-generics.svg" medium="image" type="image/svg+xml" isDefault="true"/><description><![CDATA[
        <p>After spending years writing Go, the introduction of generic type aliases in Go 1.24 is something that I have to say is exciting! Let&rsquo;s break down exactly what this means, how it works, and how it compares to other languages.</p>
<h2 id="understanding-gos-type-system-evolution">Understanding Go&rsquo;s Type System Evolution</h2>
<h3 id="type-aliases-vs-type-definitions">Type Aliases vs Type Definitions</h3>
<p>First, let&rsquo;s clear up a fundamental concept in Go:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// Type Definition - Creates a NEW type</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">MyInt</span> <span style="color:#66d9ef">int</span>     <span style="color:#75715e">// MyInt is a different type than int</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Type Alias - Creates a SYNONYM for existing type</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">AliasInt</span> = <span style="color:#66d9ef">int</span> <span style="color:#75715e">// AliasInt is exactly the same as int</span>
</span></span></code></pre></div><p>Here&rsquo;s a practical example showing the difference:</p>
      ]]></description></item><item><title>Building Beautiful CLIs with Huh</title><link>https://blog.mikesahari.com/posts/clis-and-huh/</link><pubDate>Sat, 08 Feb 2025 08:15:00 -0800</pubDate><guid isPermaLink="true">https://blog.mikesahari.com/posts/clis-and-huh/</guid><media:content url="https://blog.mikesahari.com/images/gophers/go-fish.svg" medium="image" type="image/svg+xml" isDefault="true"/><description><![CDATA[
        <p><em>Hey there, fellow Go enthusiasts! Today, I&rsquo;m going to share something that completely changed my CLI development game. Buckle up â€“ we&rsquo;re diving deep into making CLIs that users will actually enjoy using!</em></p>
<h2 id="the-cli-development-evolution">The CLI Development Evolution</h2>
<p>You know how we all instinctively reach for <a href="https://github.com/spf13/cobra">cobra</a> when building command-line tools in Go? Well, here is the perfect companion that&rsquo;s transformed how I think about CLI interactions: <a href="https://github.com/charmbracelet/huh">huh</a> by Charmbracelet.</p>
<p><img src="/images/gifs/huh-cat.gif" alt="huh" title="huh"></p>
<p><em>Here&rsquo;s the thing that got me excited:</em> While <code>cobra</code> handles all the heavy lifting of command structure and flags (and does it beautifully, I might add), <code>huh</code> brings something entirely different to the table. It&rsquo;s all about creating those smooth, interactive forms and prompts that make your CLIs feel professional and polished. Think of it as the difference between a bare-bones terminal app and something that feels like it belongs in 2025.</p>
      ]]></description></item><item><title>Go vs Python for Parallel Processing</title><link>https://blog.mikesahari.com/posts/parallel-processing/</link><pubDate>Sat, 01 Feb 2025 10:00:12 -0800</pubDate><guid isPermaLink="true">https://blog.mikesahari.com/posts/parallel-processing/</guid><media:content url="https://blog.mikesahari.com/images/gophers/go-connect.svg" medium="image" type="image/svg+xml" isDefault="true"/><description><![CDATA[
        <p>I was inspired to write this article after a recent discussion about programming language preferences, specifically questioning my stance on Python. Let me start by acknowledging Python&rsquo;s strengths - it excels in machine learning and generative AI applications. However, I <strong>prefer</strong> Go for several compelling reasons:</p>
<ul>
<li>Memory management with pointers</li>
<li>Elegant concurrency using channels and goroutines</li>
<li>Straightforward cross-compilation of binaries</li>
<li>Clean implementation of interfaces and structs</li>
</ul>
<p>But preferences often face challenges. Some argue, &ldquo;Python now has concurrency, so you should switch to Python.&rdquo; I fundamentally disagree with this reasoning. Developers should write code in languages they enjoy and find productive. In professional settings, use your preferred language until organizational standards dictate otherwise (i.e. Thou shalt use only thy golden hammer language of the team).</p>
      ]]></description></item><item><title>Building a REST API with Go</title><link>https://blog.mikesahari.com/posts/go-simple-api/</link><pubDate>Sat, 25 Jan 2025 12:05:27 -0800</pubDate><guid isPermaLink="true">https://blog.mikesahari.com/posts/go-simple-api/</guid><media:content url="https://blog.mikesahari.com/images/gophers/go-work.svg" medium="image" type="image/svg+xml" isDefault="true"/><description><![CDATA[
        <p>Have you ever wondered how modern web applications handle user authentication and data securely? In this guide, we&rsquo;ll explore building a secure REST API from the ground up using Go. Whether you&rsquo;re new to Go or an experienced developer, you&rsquo;ll learn how to create an API that handles user authentication.</p>
<p>For those who need to see the whole code before diving in, you can find all of this on <a href="https://github.com/catpaladin/go-api-example">Github</a></p>
<h2 id="technology-stack-overview">Technology Stack Overview</h2>
<p>Our API implementation uses three main technologies:</p>
      ]]></description></item><item><title>Introduction to Go and HTMX</title><link>https://blog.mikesahari.com/posts/intro-to-go-htmx/</link><pubDate>Thu, 23 Jan 2025 19:17:55 -0800</pubDate><guid isPermaLink="true">https://blog.mikesahari.com/posts/intro-to-go-htmx/</guid><media:content url="https://blog.mikesahari.com/images/gophers/go-space.svg" medium="image" type="image/svg+xml" isDefault="true"/><description><![CDATA[
        <p>Hello readers. Welcome to my blog!</p>
<p>I was debating on if I would write out a full post for this initial one (to test, you know?).
Instead, I decided to go through my collection of notes and found a topic to post; Go &amp; <a href="https://htmx.org/docs/#introduction">htmx</a>.</p>
<p>However, if you&rsquo;d like to learn more about me, check out my <a href="https://blog.mikesahari.com/about/">about</a> page.</p>
<h2 id="introduction">Introduction</h2>
<p>When building modern web applications, we often seek solutions that combine the robustness of server-side programming with the interactivity of client-side applications. Today, I&rsquo;m excited to share my experience working with Go and HTMX, a powerful combination that achieves exactly this balance.</p>
      ]]></description></item></channel></rss>