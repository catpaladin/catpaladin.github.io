<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on It's Go time!</title><link>https://catpaladin.github.io/tags/go/</link><description>Recent content in Go on It's Go time!</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 08 Feb 2025 08:15:00 -0800</lastBuildDate><atom:link href="https://catpaladin.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Building Beautiful CLIs with Huh</title><link>https://catpaladin.github.io/posts/clis-and-huh/</link><pubDate>Sat, 08 Feb 2025 08:15:00 -0800</pubDate><guid>https://catpaladin.github.io/posts/clis-and-huh/</guid><description>&lt;p>&lt;em>Hey there, fellow Go enthusiasts! Today, I&amp;rsquo;m going to share something that completely changed my CLI development game. Buckle up â€“ we&amp;rsquo;re diving deep into making CLIs that users will actually enjoy using!&lt;/em>&lt;/p>
&lt;h2 id="the-cli-development-evolution">The CLI Development Evolution&lt;/h2>
&lt;p>You know how we all instinctively reach for &lt;a href="https://github.com/spf13/cobra">cobra&lt;/a> when building command-line tools in Go? Well, here is the perfect companion that&amp;rsquo;s transformed how I think about CLI interactions: &lt;a href="https://github.com/charmbracelet/huh">huh&lt;/a> by Charmbracelet.&lt;/p>
&lt;p>&lt;img src="https://catpaladin.github.io/images/huh-cat.gif" alt="huh" title="huh">&lt;/p>
&lt;p>&lt;em>Here&amp;rsquo;s the thing that got me excited:&lt;/em> While &lt;code>cobra&lt;/code> handles all the heavy lifting of command structure and flags (and does it beautifully, I might add), &lt;code>huh&lt;/code> brings something entirely different to the table. It&amp;rsquo;s all about creating those smooth, interactive forms and prompts that make your CLIs feel professional and polished. Think of it as the difference between a bare-bones terminal app and something that feels like it belongs in 2025.&lt;/p></description></item><item><title>Go vs Python for Parallel Processing</title><link>https://catpaladin.github.io/posts/parallel-processing/</link><pubDate>Sat, 01 Feb 2025 10:00:12 -0800</pubDate><guid>https://catpaladin.github.io/posts/parallel-processing/</guid><description>&lt;p>I was inspired to write this article after a recent discussion about programming language preferences, specifically questioning my stance on Python. Let me start by acknowledging Python&amp;rsquo;s strengths - it excels in machine learning and generative AI applications. However, I &lt;strong>prefer&lt;/strong> Go for several compelling reasons:&lt;/p>
&lt;ul>
&lt;li>Memory management with pointers&lt;/li>
&lt;li>Elegant concurrency using channels and goroutines&lt;/li>
&lt;li>Straightforward cross-compilation of binaries&lt;/li>
&lt;li>Clean implementation of interfaces and structs&lt;/li>
&lt;/ul>
&lt;p>But preferences often face challenges. Some argue, &amp;ldquo;Python now has concurrency, so you should switch to Python.&amp;rdquo; I fundamentally disagree with this reasoning. Developers should write code in languages they enjoy and find productive. In professional settings, use your preferred language until organizational standards dictate otherwise (i.e. Thou shalt use only thy golden hammer language of the team).&lt;/p></description></item><item><title>Building a REST API with Go</title><link>https://catpaladin.github.io/posts/go-simple-api/</link><pubDate>Sat, 25 Jan 2025 12:05:27 -0800</pubDate><guid>https://catpaladin.github.io/posts/go-simple-api/</guid><description>&lt;p>Have you ever wondered how modern web applications handle user authentication and data securely? In this guide, we&amp;rsquo;ll explore building a secure REST API from the ground up using Go. Whether you&amp;rsquo;re new to Go or an experienced developer, you&amp;rsquo;ll learn how to create an API that handles user authentication.&lt;/p>
&lt;p>For those who need to see the whole code before diving in, you can find all of this on &lt;a href="https://github.com/catpaladin/go-api-example">Github&lt;/a>&lt;/p>
&lt;h2 id="technology-stack-overview">Technology Stack Overview&lt;/h2>
&lt;p>Our API implementation uses three main technologies:&lt;/p></description></item><item><title>Introduction to Go and HTMX</title><link>https://catpaladin.github.io/posts/intro-to-go-htmx/</link><pubDate>Thu, 23 Jan 2025 19:17:55 -0800</pubDate><guid>https://catpaladin.github.io/posts/intro-to-go-htmx/</guid><description>&lt;p>Hello readers. Welcome to my blog!&lt;/p>
&lt;p>I was debating on if I would write out a full post for this initial one (to test, you know?).
Instead, I decided to go through my collection of notes and found a topic to post; Go &amp;amp; &lt;a href="https://htmx.org/docs/#introduction">htmx&lt;/a>.&lt;/p>
&lt;p>However, if you&amp;rsquo;d like to learn more about me, check out my &lt;a href="https://blog.mikesahari.com/about/">about&lt;/a> page.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>When building modern web applications, we often seek solutions that combine the robustness of server-side programming with the interactivity of client-side applications. Today, I&amp;rsquo;m excited to share my experience working with Go and HTMX, a powerful combination that achieves exactly this balance.&lt;/p></description></item></channel></rss>