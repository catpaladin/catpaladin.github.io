<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Typescript on It's Go time!</title><link>https://catpaladin.github.io/tags/typescript/</link><description>Recent content in Typescript on It's Go time!</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 14 Mar 2025 21:49:18 -0700</lastBuildDate><atom:link href="https://catpaladin.github.io/tags/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding Go Interfaces</title><link>https://catpaladin.github.io/posts/interfaces/</link><pubDate>Fri, 14 Mar 2025 21:49:18 -0700</pubDate><guid>https://catpaladin.github.io/posts/interfaces/</guid><description>
&lt;img src="https://catpaladin.github.io/images/go-learn.svg" width="300" height="200" alt="Free image by https://github.com/MariaLetta/free-gophers-pack">
&lt;p>I still remember the moment it clicked. I was knee-deep in refactoring a Go CLI (&lt;em>weekend project&lt;/em>) for unit testing with mocks, which had become a tangled mess of dependencies when suddenly â€“ ðŸ¤¯ â€“ the elegance of Go&amp;rsquo;s interface system hit me like a revelation.&lt;/p>
&lt;p>It has been many years, but I remember programming in C#; where interfaces were verbose constructs that required explicit declarations and implementation hierarchies. But here was Go, silently composing functionality in a way that felt almost magical.&lt;/p></description></item><item><title>Understanding Generic Type Aliases in Go 1.24</title><link>https://catpaladin.github.io/posts/type-aliases/</link><pubDate>Sat, 15 Feb 2025 09:00:54 -0800</pubDate><guid>https://catpaladin.github.io/posts/type-aliases/</guid><description>
&lt;p>After spending years writing Go, the introduction of generic type aliases in Go 1.24 is something that I have to say is exciting! Let&amp;rsquo;s break down exactly what this means, how it works, and how it compares to other languages.&lt;/p>
&lt;h2 id="understanding-gos-type-system-evolution">Understanding Go&amp;rsquo;s Type System Evolution&lt;/h2>
&lt;h3 id="type-aliases-vs-type-definitions">Type Aliases vs Type Definitions&lt;/h3>
&lt;p>First, let&amp;rsquo;s clear up a fundamental concept in Go:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Type Definition - Creates a NEW type&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">MyInt&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// MyInt is a different type than int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Type Alias - Creates a SYNONYM for existing type&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">AliasInt&lt;/span> = &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// AliasInt is exactly the same as int&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here&amp;rsquo;s a practical example showing the difference:&lt;/p></description></item></channel></rss>