<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Interfaces on It's Go time!</title><link>https://catpaladin.github.io/tags/interfaces/</link><description>Recent content in Interfaces on It's Go time!</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 14 Mar 2025 21:49:18 -0700</lastBuildDate><atom:link href="https://catpaladin.github.io/tags/interfaces/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding Go Interfaces</title><link>https://catpaladin.github.io/posts/interfaces/</link><pubDate>Fri, 14 Mar 2025 21:49:18 -0700</pubDate><guid>https://catpaladin.github.io/posts/interfaces/</guid><description>
&lt;img src="https://catpaladin.github.io/images/go-learn.svg" width="300" height="200" alt="Free image by https://github.com/MariaLetta/free-gophers-pack">
&lt;p>I still remember the moment it clicked. I was knee-deep in refactoring a Go CLI (&lt;em>weekend project&lt;/em>) for unit testing with mocks, which had become a tangled mess of dependencies when suddenly â€“ ðŸ¤¯ â€“ the elegance of Go&amp;rsquo;s interface system hit me like a revelation.&lt;/p>
&lt;p>It has been many years, but I remember programming in C#; where interfaces were verbose constructs that required explicit declarations and implementation hierarchies. But here was Go, silently composing functionality in a way that felt almost magical.&lt;/p></description></item></channel></rss>