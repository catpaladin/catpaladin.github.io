<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Templating on It's Go time!</title><link>https://blog.mikesahari.com/tags/templating/</link><description>Recent content in Templating on It's Go time!</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 21 Mar 2025 19:50:55 -0700</lastBuildDate><atom:link href="https://blog.mikesahari.com/tags/templating/index.xml" rel="self" type="application/rss+xml"/><item><title>Modern Templating for Go with Templ</title><link>https://blog.mikesahari.com/posts/html-templating/</link><pubDate>Fri, 21 Mar 2025 19:50:55 -0700</pubDate><guid isPermaLink="true">https://blog.mikesahari.com/posts/html-templating/</guid><description><![CDATA[
        
        <img src="https://blog.mikesahari.com/images/go-trending.svg" width="800" height="150" />
        
        <p>I&rsquo;ve been working on a handful of personal webdev Go projects, and the one thing I could never wrap my head around was <a href="https://github.com/a-h/templ">Templ</a>. I would start the project and go, &ldquo;Oh no. I need a UI for this. Not everything can be made into a TUI&hellip; or can it..&rdquo;. This would lead me to looking at the Templ docs, not understanding how to implement it, and either use the embed package (I LOVE <a href="https://pkg.go.dev/embed">embed</a>!) or starting a TypeScript frontend, creating a bunch of tsx files and coming to the sudden realization that I gave in to React.</p>
      ]]></description></item></channel></rss>