<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on It's Go time!</title><link>https://catpaladin.github.io/tags/python/</link><description>Recent content in Python on It's Go time!</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 15 Feb 2025 09:00:54 -0800</lastBuildDate><atom:link href="https://catpaladin.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding Generic Type Aliases in Go 1.24</title><link>https://catpaladin.github.io/posts/type-aliases/</link><pubDate>Sat, 15 Feb 2025 09:00:54 -0800</pubDate><guid>https://catpaladin.github.io/posts/type-aliases/</guid><description>
&lt;p>After spending years writing Go, the introduction of generic type aliases in Go 1.24 is something that I have to say is exciting! Let&amp;rsquo;s break down exactly what this means, how it works, and how it compares to other languages.&lt;/p>
&lt;h2 id="understanding-gos-type-system-evolution">Understanding Go&amp;rsquo;s Type System Evolution&lt;/h2>
&lt;h3 id="type-aliases-vs-type-definitions">Type Aliases vs Type Definitions&lt;/h3>
&lt;p>First, let&amp;rsquo;s clear up a fundamental concept in Go:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Type Definition - Creates a NEW type&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">MyInt&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// MyInt is a different type than int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Type Alias - Creates a SYNONYM for existing type&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">AliasInt&lt;/span> = &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// AliasInt is exactly the same as int&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here&amp;rsquo;s a practical example showing the difference:&lt;/p></description></item><item><title>Go vs Python for Parallel Processing</title><link>https://catpaladin.github.io/posts/parallel-processing/</link><pubDate>Sat, 01 Feb 2025 10:00:12 -0800</pubDate><guid>https://catpaladin.github.io/posts/parallel-processing/</guid><description>
&lt;p>I was inspired to write this article after a recent discussion about programming language preferences, specifically questioning my stance on Python. Let me start by acknowledging Python&amp;rsquo;s strengths - it excels in machine learning and generative AI applications. However, I &lt;strong>prefer&lt;/strong> Go for several compelling reasons:&lt;/p>
&lt;ul>
&lt;li>Memory management with pointers&lt;/li>
&lt;li>Elegant concurrency using channels and goroutines&lt;/li>
&lt;li>Straightforward cross-compilation of binaries&lt;/li>
&lt;li>Clean implementation of interfaces and structs&lt;/li>
&lt;/ul>
&lt;p>But preferences often face challenges. Some argue, &amp;ldquo;Python now has concurrency, so you should switch to Python.&amp;rdquo; I fundamentally disagree with this reasoning. Developers should write code in languages they enjoy and find productive. In professional settings, use your preferred language until organizational standards dictate otherwise (i.e. Thou shalt use only thy golden hammer language of the team).&lt;/p></description></item></channel></rss>