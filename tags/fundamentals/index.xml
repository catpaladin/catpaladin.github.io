<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fundamentals on It's Go time!</title><link>https://blog.mikesahari.com/tags/fundamentals/</link><description>Recent content in Fundamentals on It's Go time!</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 14 Mar 2025 21:49:18 -0700</lastBuildDate><atom:link href="https://blog.mikesahari.com/tags/fundamentals/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding Go Interfaces</title><link>https://blog.mikesahari.com/posts/interfaces/</link><pubDate>Fri, 14 Mar 2025 21:49:18 -0700</pubDate><guid isPermaLink="true">https://blog.mikesahari.com/posts/interfaces/</guid><description><![CDATA[
        
        <img src="https://blog.mikesahari.com/images/go-learn.svg" width="800" height="150" />
        
        <p>I still remember the moment it clicked. I was knee-deep in refactoring a Go CLI (<em>weekend project</em>) for unit testing with mocks, which had become a tangled mess of dependencies when suddenly â€“ ðŸ¤¯ â€“ the elegance of Go&rsquo;s interface system hit me like a revelation.</p>
<p>It has been many years, but I remember programming in C#; where interfaces were verbose constructs that required explicit declarations and implementation hierarchies. But here was Go, silently composing functionality in a way that felt almost magical.</p>
      ]]></description></item><item><title>A Guide to Pointers in Go</title><link>https://blog.mikesahari.com/posts/go-pointers/</link><pubDate>Fri, 28 Feb 2025 22:14:22 -0800</pubDate><guid isPermaLink="true">https://blog.mikesahari.com/posts/go-pointers/</guid><description><![CDATA[
        
        <img src="https://blog.mikesahari.com/images/go-learn.svg" width="800" height="150" />
        
        <p>Let&rsquo;s get real about pointers in Goâ€”they&rsquo;re not the scary beasts you might remember from C (if you came from that CS background). Go&rsquo;s pointer implementation strikes that perfect balance between giving you low-level control and keeping you from shooting yourself in the foot.</p>
<h2 id="for-python-developers-why-care-about-pointers">For Python Developers: Why Care About Pointers?</h2>
<p>This blog introduces pointers, a fundamental programming concept many developers struggle with. Having worked with numerous senior Cloud Engineers, SREs, and Platform Engineers who, despite years of industry experience, have only Python knowledge and limited exposure to memory management concepts, I&rsquo;ve crafted this primer to establish essential context before diving into the main teachings.</p>
      ]]></description></item><item><title>Go Channels: A Concurrency Guide</title><link>https://blog.mikesahari.com/posts/go-channels/</link><pubDate>Fri, 21 Feb 2025 21:43:05 -0800</pubDate><guid isPermaLink="true">https://blog.mikesahari.com/posts/go-channels/</guid><description><![CDATA[
        
        <img src="https://blog.mikesahari.com/images/go-learn.svg" width="800" height="150" />
        
        <p>Hello fellow Gophers!</p>
<p>I&rsquo;m absolutely thrilled to dive deep into one of Go&rsquo;s most elegant features: <strong>Channels</strong>! If you&rsquo;re just starting your Go journey or looking to level up your concurrency game, you&rsquo;re in for a treat.</p>
<p>Channels are the communication mechanism that makes goroutines work together efficiently and safely. They enable goroutines to exchange data without shared memory, reducing the risk of race conditions.</p>
<p>I hate to use an analogy here, but imagine you have a team of engineers working on some big company project.. let&rsquo;s call it Kilonova.</p>
      ]]></description></item></channel></rss>